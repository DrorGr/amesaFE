name: Build and Deploy Frontend

on:
  push:
    branches: ["main", "dev", "stage"]
  pull_request:
    branches: ["main", "dev", "stage"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "frontend-deploy"
  cancel-in-progress: false

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test:ci
        continue-on-error: true

      - name: Build Angular
        run: npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build for development
        run: npm run build:dev

      - name: Deploy to development
        run: |
          echo "Deploying to development environment..."
          # Add your development deployment logic here

  deploy-stage:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stage'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build:stage

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build:prod

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here

  deploy-github-pages:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      # Resolve the actual dist folder (handles both classic and /browser layout)
      - name: Resolve dist path
        id: dist
        shell: bash
        run: |
          DIST_DIR="dist"
          if [ -d "${DIST_DIR}/demo/browser" ]; then
            DIST_DIR="${DIST_DIR}/demo/browser"
          elif [ -d "${DIST_DIR}/demo" ]; then
            DIST_DIR="${DIST_DIR}/demo"
          fi
          echo "dist_dir=${DIST_DIR}" >> "$GITHUB_OUTPUT"
          echo "Resolved dist: ${DIST_DIR}"
          ls -la "${DIST_DIR}"

      - name: Add .nojekyll
        run: touch "${{ steps.dist.outputs.dist_dir }}/.nojekyll"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.dist.outputs.dist_dir }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
